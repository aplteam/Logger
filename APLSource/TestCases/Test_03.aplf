 R←Test_03(stopFlag batchFlag);path;myLogger;list;rc;more;msg;fileContents;parmSpace;shouldBe;unicodeChar;questionMark;⎕TRAP;qdmx
⍝ Creates ANSI file & writes ANSI records to it but also tries to add records with Unicode chars.
⍝ Proper APL chars might be a plus when it comes to error messages (⎕DM)
 R←T._Failed
 ⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')

 path←GetFileRoot,'LogFiles'
 questionMark←'?'
   ⍝ Use a real Unicode char with a unicode APL,
   ⍝ otherwise use it's two-byte-representation:
 unicodeChar←⎕UCS 931

 :If FilesAndDirs.IsDir path
     list←⊃FilesAndDirs.Dir path,'/*.log'
     FilesAndDirs.DeleteFile list
 :EndIf

 myLogger←⎕NEW ##.Logger(path'ansi' 'DATE' 1(2100 11 6 23 59 55))
 →T.GoToTidyUp 0≠myLogger.errorCounter
 myLogger.printToSession←1

 rc←0
 more←0 'ldskmclksmdc' 'obj=#282828'
 msg←'There is no problem'
 myLogger.LogError(rc msg more)

 rc←1
 more←'"',unicodeChar,'"'
 msg←'Summary "',unicodeChar,'" of problems (this line contains a unicode char!)'
 myLogger.LogError(rc msg more)

 rc←1
 more←'"',unicodeChar,'"'
 msg←'123',¨⊂'Summary "',unicodeChar,'" of problems (this line also contains a unicode char!)'
 myLogger.LogError(rc msg more)

 rc←1
 msg←'"',unicodeChar,'"'
 more←⊃'456',¨⊂'Summary" ',unicodeChar,'" of problems (even this line contains a unicode char!)'
 myLogger.LogError(rc msg more)

 →T.GoToTidyUp 0≠myLogger.errorCounter

 fileContents←⊃FilesAndDirs.NGET myLogger.FullFilename
 →T.GoToTidyUp 8≠+/questionMark⍷,fileContents

⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ utf8←0
 myLogger.Close
 list←⊃FilesAndDirs.Dir path,'/*.log'
 FilesAndDirs.DeleteFile list

 myLogger←⎕NEW ##.Logger(path'ansi' 'DATE' 1(2100 11 6 23 59 55))
 →T.GoToTidyUp 0≠myLogger.errorCounter
 myLogger.printToSession←1

 msg←'There is no problem'
 myLogger.Log msg

 msg←'This statement caused a WS FULL: {{⍵/⍨2=+⌿0=⍵∘.|⍵}⍳⍵}100000'
 myLogger.Log msg

 msg←'These chars are all encoded in 8 bits: üäöÜÄÖß'
 myLogger.Log msg

 msg←'Summary "',unicodeChar,'" of problems (this line contains a unicode char which is not in ⎕AV!'
 myLogger.Log msg

 msg←'123',¨⊂'Summary "',unicodeChar,'" of problems (this line contains a unicode char which is not in ⎕AV!'
 myLogger.Log msg

 msg←⊃'123',¨⊂'Summary "',unicodeChar,'" of problems (this line contains a unicode char which is not in ⎕AV!'
 myLogger.Log msg

 →T.GoToTidyUp 0≠myLogger.errorCounter

 fileContents←↑⊃FilesAndDirs.NGET myLogger.FullFilename
 →T.GoToTidyUp 25≠+/'?'⍷,fileContents

 list←⊃FilesAndDirs.Dir path,'/*.log'
 myLogger.Close
 FilesAndDirs.DeleteFile list

 ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ utf8←1
 myLogger.Close
 list←⊃FilesAndDirs.Dir path,'/*.log'
 FilesAndDirs.DeleteFile list

 myLogger←⎕NEW ##.Logger(path'UTf8' 'DATE' 1(2100 11 6 23 59 55))
 →T.GoToTidyUp 0≠myLogger.errorCounter
 myLogger.printToSession←1

 msg←'There is no problem'
 myLogger.Log msg

 msg←'This statement caused a WS FULL: {{⍵/⍨2=+⌿0=⍵∘.|⍵}⍳⍵}100000'
 myLogger.Log msg

 msg←'These chars are all encoded in 8 bits: üäöÜÄÖß'
 myLogger.Log msg

 msg←'Summary "',unicodeChar,'" of problems (this line contains a unicode char which is not in ⎕AV!'
 myLogger.Log msg

 msg←'123',¨⊂'Summary "',unicodeChar,'" of problems (this line contains a unicode char which is not in ⎕AV!'
 myLogger.Log msg

 msg←⊃'123',¨⊂'Summary "',unicodeChar,'" of problems (this line contains a unicode char which is not in ⎕AV!'
 myLogger.Log msg

 →T.GoToTidyUp 0≠myLogger.errorCounter

 fileContents←↑⊃FilesAndDirs.NGET myLogger.FullFilename
 →T.GoToTidyUp 0≠+/'?'⍷,fileContents
 →T.GoToTidyUp 0=∨/'{{⍵/⍨2=+⌿0=⍵∘.|⍵}⍳⍵}100000'⍷,fileContents
 →T.GoToTidyUp 0=∨/'üäöÜÄÖß'⍷,fileContents

 list←⊃FilesAndDirs.Dir path,'/*.log'
 myLogger.Close
 FilesAndDirs.DeleteFile list

⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
 myLogger.Close
 parmSpace←##.Logger.CreatePropertySpace
 parmSpace.IAmUnknown←'Really!'
 :Trap 0 ⍝ 11  ⍝TODO⍝ Due to a Dyalog bug, there is a VALUE ERROR (6) in the next line although a DOMAIN ERROR (11) is signalled!!
     myLogger←⎕NEW ##.Logger(,⊂parmSpace)
     →T.GoToTidyUp 1
 :Else
     qdmx←⎕DMX
     :If 'Invalid keyword(s): IAmUnknown'≢qdmx.EM
         →T.GoToTidyUp 1
     :EndIf
 :EndTrap

 myLogger.Close
 parmSpace←##.Logger.CreatePropertySpace
 parmSpace.style←'I am unknown!'
 parmSpace.IAmUnknown←'Really!'
 parmSpace.IAmAlsoUnknown←'Indeed'
 :Trap 0 ⍝ 11  ⍝TODO⍝ Due to a Dyalog bug, there is a VALUE ERROR (6) in the next line although a DOMAIN ERROR (11) is signalled!!
     myLogger←⎕NEW ##.Logger(,⊂parmSpace)
     →T.GoToTidyUp 1
 :Else
     qdmx←⎕DMX
     :If ~∧/(⊂qdmx.EM){∨/⍵⍷⍵}¨'Invalid' 'keyword(s)' 'IAmAlsoUnknown' 'IAmUnknown' 'style' ⍝ necessary because sorting order is different between Classic and Unicode version!
         →T.GoToTidyUp 1
     :EndIf
 :EndTrap

 myLogger.Close
 parmSpace←##.Logger.CreatePropertySpace
 parmSpace.style←'utf9'
 parmSpace.style←'I am unknown!'
 parmSpace.IAmUnknown←'Really!'
 parmSpace.IAmAlsoUnknown←'Indeed'
 :Trap 0 ⍝ 11  ⍝TODO⍝ Due to a Dyalog bug, there is a VALUE ERROR (6) in the next line although a DOMAIN ERROR (11) is signalled!!
     myLogger←⎕NEW ##.Logger(,⊂parmSpace)
     →T.GoToTidyUp 1
 :Else
     qdmx←⎕DMX
     :If ~∧/(⊂qdmx.EM){∨/⍵⍷⍵}¨'Invalid' 'keyword(s)' 'IAmAlsoUnknown' 'IAmUnknown' 'style' ⍝ necessary because sorting order is different between Classic and Unicode version!
         →T.GoToTidyUp 1
     :EndIf
 :EndTrap

 myLogger.Close
 parmSpace←⎕NS''
 parmSpace.encoding←'utf9'
 :Trap 0 ⍝ 11  ⍝TODO⍝ Due to a Dyalog bug, there is a VALUE ERROR (6) in the next line although a DOMAIN ERROR (11) is signalled!!
     myLogger←⎕NEW ##.Logger(,⊂parmSpace)
     →T.GoToTidyUp 1
 :Else
     qdmx←⎕DMX
     :If 'Missing: "active"'≢qdmx.EM
         →T.GoToTidyUp 1
     :EndIf
 :EndTrap

 myLogger.Close
 parmSpace←⎕NS''
 parmSpace.active←1
 parmSpace.encoding←'utf9'
 parmSpace.path←GetFileRoot,'LogFiles'
 :Trap 0 ⍝ 11  ⍝TODO⍝ Due to a Dyalog bug, there is a VALUE ERROR (6) in the next line although a DOMAIN ERROR (11) is signalled!!
     myLogger←⎕NEW ##.Logger(,⊂parmSpace)
     →T.GoToTidyUp 1
 :Else
     qdmx←⎕DMX
     :If 'Invalid: "encoding"'≢qdmx.EM
         →T.GoToTidyUp 1
     :EndIf
 :EndTrap

∆Go:
 myLogger.Close
 parmSpace←##.Logger.CreatePropertySpace
 parmSpace.encoding←'utf8'
 parmSpace.debug←1
 parmSpace.filenamePrefix←'##prefix##'
 parmSpace.filenamePostfix←'$$postfix$$'
 parmSpace.path←GetFileRoot,'LogFiles'
 myLogger←⎕NEW ##.Logger(,⊂parmSpace)
 →T.GoToTidyUp 0≠myLogger.errorCounter
 shouldBe←''

 myLogger.printToSession←1

 shouldBe←shouldBe,⊂msg←'Attention, there is no problem'
 myLogger.Log msg

 shouldBe←shouldBe,⊂msg←'This statement caused a WS FULL: {{⍵/⍨2=+⌿0=⍵∘.|⍵}⍳⍵}100000'
 myLogger.Log msg

 shouldBe←shouldBe,⊂msg←'These chars are all encoded in 8 bits: üäöÜÄÖß'
 myLogger.Log msg

 shouldBe←shouldBe,⊂msg←'Summary "',unicodeChar,'" of problems (this line contains a unicode char!'
 myLogger.Log msg

 shouldBe←shouldBe,msg←'123',¨⊂'Summary "',unicodeChar,'" of problems (this line contains a unicode char!'
 myLogger.Log msg

 shouldBe←shouldBe,↓msg←⊃'123',¨⊂'Summary "',unicodeChar,'" of problems (this line contains a unicode char!'
 myLogger.Log msg

 →T.GoToTidyUp 0≠myLogger.errorCounter

 fileContents←⊃FilesAndDirs.NGET myLogger.FullFilename 1
 →T.GoToTidyUp shouldBe≢∆RemoveTimestampAndTid 1↓fileContents
 R←T._OK

∆TidyUp:
 :Trap 0
     myLogger.Close
 :EndTrap
 :Trap 0
     list←⊃FilesAndDirs.Dir path,'/*.log'
     FilesAndDirs.DeleteFile list
 :EndTrap
